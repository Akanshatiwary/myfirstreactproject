{"version":3,"sources":["components/Searchbar.js","components/ImageList.js","components/App.js","serviceWorker.js","index.js"],"names":["Searchbar","props","state","term","Inputchange","bind","onFormsubmit","event","this","setState","target","value","e","preventDefault","Submit","className","onSubmit","type","onChange","React","Component","ImageList","list","images","map","image","key","id","src","urls","regular","alt","description","App","Search","item","axios","get","params","query","headers","Authorization","response","data","results","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gSAkCeA,G,uDA9Bb,WAAYC,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAQ,CAACC,KAAK,IACnB,EAAKC,YAAc,EAAKA,YAAYC,KAAjB,gBACnB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBAJJ,E,wDAMNE,GACVC,KAAKC,SAAS,CAACN,KAAKI,EAAMG,OAAOC,U,mCAEtBC,GACXA,EAAEC,iBACFL,KAAKP,MAAMa,OAAON,KAAKN,MAAMC,Q,+BAG7B,OACE,yBAAKY,UAAU,cACb,0BAAMA,UAAU,UAAUC,SAAUR,KAAKF,cACvC,yBAAKS,UAAU,SACb,+CACA,2BAAOE,KAAO,OACdN,MAASH,KAAKN,MAAMC,KACpBe,SAAYV,KAAKJ,qB,GAtBLe,IAAMC,YCefC,EAdG,SAACpB,GACjB,IAAMqB,EAAOrB,EAAMsB,OAAOC,KAAI,SAACC,GAAD,OAC5B,yBAAKC,IAAKD,EAAME,GAAIC,IAAKH,EAAMI,KAAKC,QAASC,IAAKN,EAAMO,iBAE1D,OACE,yBAAKjB,UAAU,cACVO,ICwBQW,E,kDA1Bf,WAAYhC,GAAO,IAAD,8BAChB,cAAMA,IACDC,MAAM,CAACqB,OAAO,IACnB,EAAKW,OAAO,EAAKA,OAAO7B,KAAZ,gBAHI,E,4FAKL8B,G,uFACYC,IAAMC,IAAI,yCAAyC,CACxEC,OAAQ,CAAEC,MAAOJ,GACjBK,QAAQ,CACNC,cAAc,2D,OAHZC,E,OAMNlC,KAAKC,SAAS,CAACc,OAAOmB,EAASC,KAAKC,U,sIAGpC,OACI,yBAAK7B,UAAU,gBACb,kBAAC,EAAD,CAAWD,OAAQN,KAAK0B,SACxB,kBAAC,EAAD,CAAWX,OAAQf,KAAKN,MAAMqB,c,GAnBtBJ,IAAMC,WCKJyB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.d5b09fb6.chunk.js","sourcesContent":["import React from 'react';\nimport './Imagestyle.css';\n\nclass Searchbar extends React.Component {\n  constructor(props){\n    super(props);\n    this.state = {term:''};\n    this.Inputchange = this.Inputchange.bind(this);\n    this.onFormsubmit = this.onFormsubmit.bind(this);\n  }\n  Inputchange(event){\n    this.setState({term:event.target.value});\n  }\n  onFormsubmit(e){\n    e.preventDefault();\n    this.props.Submit(this.state.term)\n  }\n  render() {\n    return (\n      <div className=\"ui segment\">\n        <form className=\"ui form\" onSubmit={this.onFormsubmit}>\n          <div className=\"field\">\n            <label>Image Search</label>\n            <input type = \"text\" \n            value = {this.state.term} \n            onChange = {this.Inputchange}/>\n          </div>\n        </form>\n      </div>\n    );\n  }\n\n}\n\nexport default Searchbar;","import React from 'react';\nimport './Imagestyle.css';\n\n\nconst ImageList = (props) => {\n  const list = props.images.map((image) =>(\n    <img key={image.id} src={image.urls.regular} alt={image.description} />)\n  )\n  return (\n    <div className=\"image_list\">\n        {list}\n    </div>\n  )\n}\n\n\n\n\nexport default ImageList;","import React from 'react';\nimport axios from 'axios';\nimport Searchbar from './Searchbar';\nimport ImageList from './ImageList';\nimport './Imagestyle.css';\n\n\nclass App extends React.Component{\n  constructor(props){\n    super(props);\n    this.state={images:[]}\n    this.Search=this.Search.bind(this);\n  }\n  async Search(item){\n    const response = await axios.get('https://api.unsplash.com/search/photos',{\n      params: { query: item },\n      headers:{\n        Authorization:'Client-ID IZCY4rjL53CykdROU6aekupOiA1yA5fIOPQp5KVfdAg'\n      }\n    });\n    this.setState({images:response.data.results})\n  }\n  render(){\n    return(\n        <div className=\"ui container\">\n          <Searchbar Submit={this.Search}/>\n          <ImageList images={this.state.images}/>\n        </div>\n    );\n  }\n}\n \n\n\n  export default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './components/App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}